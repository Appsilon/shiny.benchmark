[{"path":"https://github.com/Appsilon/shiny.benchmark/PULL_REQUEST_TEMPLATE.html","id":"link-to-the-issue","dir":"","previous_headings":"","what":"Link to the Issue","title":"NA","text":"…","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/PULL_REQUEST_TEMPLATE.html","id":"definition-of-done","dir":"","previous_headings":"","what":"Definition of Done","title":"NA","text":"…","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/PULL_REQUEST_TEMPLATE.html","id":"how-to-test-changes","dir":"","previous_headings":"","what":"How to test changes","title":"NA","text":"…","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/PULL_REQUEST_TEMPLATE.html","id":"tasks-for-pr-author","dir":"","previous_headings":"","what":"Tasks for PR author","title":"NA","text":"Test change ensure regression Change corresponding issue. Ensure linked GitHub Author change opened pull request assigned reviewer","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/PULL_REQUEST_TEMPLATE.html","id":"general-policy","dir":"","previous_headings":"","what":"General policy:","title":"NA","text":"applicable - add instructions testing ’s issue, create . issue needs well defined described. interaction user, user-facing messages, plots, reports etc. written perspective person using receiving . understandable helpful person. user sees error message, call action, .e. user knows fix . README, documentation code comments updated information related change. code peer-reviewed merging main branch changes merged main branch use development. Continuous integration checks (linter, unit tests, integration tests) configured pass. Optional: unit tests added new changed logic. task requirements satisfied. describe . reviewer responsible verify aspect task. Change covers things task. Please create new PR want fix something else.","code":""},{"path":[]},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"how-to-install-shiny-benchmark","dir":"Articles > Tutorial","previous_headings":"Setup","what":"How to install shiny.benchmark?","title":"Tutorial: Compare performance of different versions of a shiny application","text":"shiny.benchmark can use two different engines test changes performance application: shinytest2 Cypress. latter requires Node (version 12 higher) yarn (version 1.22.17 higher) available. install computer, follow guidelines documentation pages: Node yarn Besides , Linux, might required install Cypress dependencies. Check documentation find . install shiny.benchmark use following command: shiny.benchmark handle Cypress installation. face inconvenience using Cypress, please try use shinytest2 rest tutorial.","code":"remotes::install_github(\"Appsilon/shiny.benchmark\")"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"create-an-initial-application","dir":"Articles > Tutorial","previous_headings":"","what":"Create an initial application","title":"Tutorial: Compare performance of different versions of a shiny application","text":"Let’s start creating application serve us guide shiny.benchmark functionalities. Save following code ui.R. simple user interface containing three columns one action button . Also column output created server file later. server side, application use Sys.sleep function simulate task every time user press button. helpful us since can easily increase/decrease sleep time simulate improvements/deterioration application. Save following code server.R: application look like :","code":"function() {   bootstrapPage(     tags$h1(\"Measuring time in different commits\"),     column(       width = 4,       actionButton(inputId = \"run1\", label = \"Run 1\"),       uiOutput(outputId = \"out1\")     ),     column(       width = 4,       actionButton(inputId = \"run2\", label = \"Run 2\"),       uiOutput(outputId = \"out2\")     ),     column(       width = 4,       actionButton(inputId = \"run3\", label = \"Run 3\"),       uiOutput(outputId = \"out3\")     )   ) } times <- c(10, 5, 2)  function(input, output, session) {   # Sys.sleep   react1 <- eventReactive(input$run1, {     out <- system.time(       Sys.sleep(times[1] + rexp(n = 1, rate = 1)) # we will play with the time here     )      return(out[3])   })    react2 <- eventReactive(input$run2, {     out <- system.time(       Sys.sleep(times[2] + rexp(n = 1, rate = 1)) # we will play with the time here     )      return(out[3])   })    react3 <- eventReactive(input$run3, {     out <- system.time(       Sys.sleep(times[3] + rexp(n = 1, rate = 1)) # we will play with the time here     )      return(out[1])   })    # outputs   output$out1 <- renderUI({     tags$span(round(react1()), style = \"font-size: 5vw;\")   })    output$out2 <- renderUI({     tags$span(round(react2()), style = \"font-size: 5vw;\")   })    output$out3 <- renderUI({     tags$span(round(react3()), style = \"font-size: 5vw;\")   }) } shiny::runApp()"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"tests-engines","dir":"Articles > Tutorial","previous_headings":"","what":"Tests engines","title":"Tutorial: Compare performance of different versions of a shiny application","text":"shiny.benchmark works two different engines: Cypress shinytest2.","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"shinytest2","dir":"Articles > Tutorial","previous_headings":"Tests engines","what":"shinytest2","title":"Tutorial: Compare performance of different versions of a shiny application","text":"shinytest2 R package maintained Posit (formerly RStudio). handy R users since tests can done using R (differently Cypress). set easily, run shinytest2::use_shinytest2(). create configuration files need change tutorial. Save following code tests/testthat/test-set1.R: code simulating clicks three buttons application. Also waits outputs appear. new file, replace set1 set2 code save tests/testthat/test-set2.R well. useful present functionalities later.","code":"test_that(\"Out1 time elapsed - set1\", {   app <- AppDriver$new(name = \"test1\", height = 975, width = 1619)   app$click(\"run1\")   app$expect_values(output = \"out1\") })  test_that(\"Out2 time elapsed - set1\", {   app <- AppDriver$new(name = \"test2\", height = 975, width = 1619)   app$click(\"run2\")   app$expect_values(output = \"out2\") })  test_that(\"Out3 time elapsed - set1\", {   app <- AppDriver$new(name = \"test3\", height = 975, width = 1619)   app$click(\"run3\")   app$expect_values(output = \"out3\") }) test_that(\"Out1 time elapsed - set2\", {   app <- AppDriver$new(name = \"test1\", height = 975, width = 1619)   app$click(\"run1\")   app$expect_values(output = \"out1\") })  test_that(\"Out2 time elapsed - set2\", {   app <- AppDriver$new(name = \"test2\", height = 975, width = 1619)   app$click(\"run2\")   app$expect_values(output = \"out2\") })  test_that(\"Out3 time elapsed - set2\", {   app <- AppDriver$new(name = \"test3\", height = 975, width = 1619)   app$click(\"run3\")   app$expect_values(output = \"out3\") })"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"cypress","dir":"Articles > Tutorial","previous_headings":"Tests engines","what":"Cypress","title":"Tutorial: Compare performance of different versions of a shiny application","text":"Cypress widely used end end testing JavaScript library. broader usage, engine allows user take advantage huge number functionalities order test applications. Also, community active therefore easier find solution bugs may encounter coding. Save following code tests/cypress/test-set1.js: , replace set1 set2 code save tests/cypress/test-set2.R well.","code":"describe('Cypress test', () => {   it('Out1 time elapsed - set1', () => {     cy.visit('/');     cy.get('#run1').click();     cy.get('#out1', {timeout: 10000}).should('be.visible');   });    // Test how long it takes to wait for out2   it('Out2 time elapsed - set1', () => {     cy.get('#run2').click();     cy.get('#out2', {timeout: 10000}).should('be.visible');   });    // Test how long it takes to wait for out3   it('Out3 time elapsed - set1', () => {     cy.get('#run3').click();     cy.get('#out3', {timeout: 10000}).should('be.visible');   }); }); describe('Cypress test', () => {   it('Out1 time elapsed - set2', () => {     cy.visit('/');     cy.get('#run1').click();     cy.get('#out1', {timeout: 10000}).should('be.visible');   });    // Test how long it takes to wait for out2   it('Out2 time elapsed - set2', () => {     cy.get('#run2').click();     cy.get('#out2', {timeout: 10000}).should('be.visible');   });    // Test how long it takes to wait for out3   it('Out3 time elapsed - set2', () => {     cy.get('#run3').click();     cy.get('#out3', {timeout: 10000}).should('be.visible');   }); });"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"package-management","dir":"Articles > Tutorial","previous_headings":"","what":"Package management","title":"Tutorial: Compare performance of different versions of a shiny application","text":"development process, normal use different packages/package versions. renv allow us manage package versions used shiny.benchmark default. Run following code setup renv test application.","code":"renv::init() renv::install(\"remotes\") remotes::install_github(\"Appsilon/shiny.benchmark\") renv::snapshot(prompt = FALSE)"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"simulating-app-versions","dir":"Articles > Tutorial","previous_headings":"","what":"Simulating app versions","title":"Tutorial: Compare performance of different versions of a shiny application","text":"regular project, use git maintain code versioning. case, natural different app’s versions different branches/commits/releases. shiny.benchmark take advantage different git refs run tests different code versions. Add following code .gitignore avoid problems uncommitted files later: Now, lets create git repo commit current application develop branch: Also, let’s create new branch called feature1: point, can simulate improvement application. , let’s change Sys.sleep time server function. Replace times <- c(10, 5, 2) times <- c(5, 2.5, 1) first row server.R commit changes. play renv let’s downgrade shiny version snapshot : Replace times <- c(5, 2.5, 1) times <- c(2.5, 1.25, 0.5) first row server.R. Also, run following code downgrade shiny: Commit changes: Great! set!","code":".Rhistory .Rproj.user/ .Rproj.user renv/ git init git checkout -b develop git add . git commit -m \"first commit\" git checkout -b feature1 git add server.R git commit -m \"improving performance\" git checkout -b feature2 renv::install(\"shiny@1.0.0\") renv::snapshot(prompt = FALSE) git add . git commit -m \"downgrading shiny\" git checkout develop"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"shiny-benchmark","dir":"Articles > Tutorial","previous_headings":"","what":"shiny.benchmark","title":"Tutorial: Compare performance of different versions of a shiny application","text":"Now ingredients needed: application, set tests different versions git repo. shiny.benchmark::benchmark function two mandatory arguments: commit_list: named list git refs (commit hashes, branch names, tags, …) cypress_dir shinytest2_dir: path Cypress shinytest2 tests default, shiny.benchmark uses renv. turn renv just set use_renv = FALSE benchmark call. aware function take run since application started tested 3 times (develop, feature1 using_renv branches). Instead branch name, can also use hash code desired commit. console display something similar :  can access results using cypress_out$performance shinytest2_out$performance: can notice tests files reported (test-set1 test-set2). Also, result list data.frames entry correspond specific commit. now use shinytest2. However, everything also applied Cypress.","code":"library(shiny.benchmark)  commits <- list(   \"develop\" = \"develop\",   \"feature1\" = \"feature1\",   \"using_renv\" = \"feature2\" )  cypress_dir <- \"tests/cypress/\" testthat_dir <- \"tests/\"  cypress_out <- benchmark(   commit_list = commits,   cypress_dir = cypress_dir,   use_renv = FALSE )  shinytest2_out <- benchmark(   commit_list = commits,   shinytest2_dir = testthat_dir,   use_renv = FALSE ) cypress_out$performance ## $develop ## $develop[[1]] ##                  date rep_id                test_name duration_ms ## 1 2023-01-06 19:44:07      1 Out1 time elapsed - set1       10782 ## 2 2023-01-06 19:44:07      1 Out2 time elapsed - set1        6091 ## 3 2023-01-06 19:44:07      1 Out3 time elapsed - set1        2804 ## 4 2023-01-06 19:44:07      1 Out1 time elapsed - set2       10591 ## 5 2023-01-06 19:44:07      1 Out2 time elapsed - set2        6768 ## 6 2023-01-06 19:44:07      1 Out3 time elapsed - set2        3944 ##  ##  ## $feature1 ## $feature1[[1]] ##                  date rep_id                test_name duration_ms ## 1 2023-01-06 19:44:39      1 Out1 time elapsed - set1        6471 ## 2 2023-01-06 19:44:39      1 Out2 time elapsed - set1        6442 ## 3 2023-01-06 19:44:39      1 Out3 time elapsed - set1        1422 ## 4 2023-01-06 19:44:39      1 Out1 time elapsed - set2        5613 ## 5 2023-01-06 19:44:39      1 Out2 time elapsed - set2        3593 ## 6 2023-01-06 19:44:39      1 Out3 time elapsed - set2        1272 ##  ##  ## $using_renv ## $using_renv[[1]] ##                  date rep_id                test_name duration_ms ## 1 2023-01-06 19:45:14      1 Out1 time elapsed - set1        3941 ## 2 2023-01-06 19:45:14      1 Out2 time elapsed - set1        3010 ## 3 2023-01-06 19:45:14      1 Out3 time elapsed - set1         995 ## 4 2023-01-06 19:45:14      1 Out1 time elapsed - set2        3082 ## 5 2023-01-06 19:45:14      1 Out2 time elapsed - set2        2130 ## 6 2023-01-06 19:45:14      1 Out3 time elapsed - set2        2458"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"package-management-1","dir":"Articles > Tutorial","previous_headings":"shiny.benchmark","what":"Package management","title":"Tutorial: Compare performance of different versions of a shiny application","text":"order use renv, simply assign use_renv = TRUE. can also use renv_prompt = TRUE want see renv applying background.","code":"shinytest2_out <- benchmark(   commit_list = commits,   shinytest2_dir = testthat_dir,   use_renv = TRUE,   renv_prompt = TRUE )"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"handling-multiple-files","dir":"Articles > Tutorial","previous_headings":"shiny.benchmark","what":"Handling multiple files","title":"Tutorial: Compare performance of different versions of a shiny application","text":"Sometimes interest measure performance tests . order select specific files can use argument tests_pattern. argument accept either vector files (one item commit list). Also, possible search pattern tests files. Now output sightly different. develop branch files (test-set1 test-set2) use since match test-set[0-9] pattern. feature1 feature2 one file use since directly requested test-set1 test-set2 files respectively. can useful new tests added development process need run different tests different versions.","code":"shinytest2_out <- benchmark(   commit_list = commits,   shinytest2_dir = testthat_dir,   use_renv = FALSE,   tests_pattern = c(\"set[0-9]\", \"set1\", \"set2\") ) shinytest2_out$performance ## $develop ## $develop[[1]] ##                  date rep_id                test_name duration_ms ## 1 2023-01-06 19:44:07      1 Out1 time elapsed - set1      12.056 ## 2 2023-01-06 19:44:07      1 Out2 time elapsed - set1       8.166 ## 3 2023-01-06 19:44:07      1 Out3 time elapsed - set1       6.947 ## 4 2023-01-06 19:44:07      1 Out1 time elapsed - set2      13.330 ## 5 2023-01-06 19:44:07      1 Out2 time elapsed - set2       7.099 ## 6 2023-01-06 19:44:07      1 Out3 time elapsed - set2       6.847 ##  ##  ## $feature1 ## $feature1[[1]] ##                  date rep_id                test_name duration_ms ## 1 2023-01-06 19:44:39      1 Out1 time elapsed - set1       6.969 ## 2 2023-01-06 19:44:39      1 Out2 time elapsed - set1       5.589 ## 3 2023-01-06 19:44:39      1 Out3 time elapsed - set1       3.233 ##  ##  ## $using_renv ## $using_renv[[1]] ##                  date rep_id                test_name duration_ms ## 1 2023-01-06 19:45:14      1 Out1 time elapsed - set2       4.598 ## 2 2023-01-06 19:45:14      1 Out2 time elapsed - set2       4.020 ## 3 2023-01-06 19:45:14      1 Out3 time elapsed - set2       3.411"},{"path":"https://github.com/Appsilon/shiny.benchmark/articles/tutorial/how-to-measure-apps-performance.html","id":"repetitions","dir":"Articles > Tutorial","previous_headings":"shiny.benchmark","what":"Repetitions","title":"Tutorial: Compare performance of different versions of a shiny application","text":"Sometimes important repeat measurement several times distribution performance times instead unique measurement. , possible use n_rep argument follows: faster running benchmark several times since test structure created internally saving execution time. methods implemented make easy explore results. summary brings summarized statistics mean, median, minimum maximum plot shows plot average times git ref test. Also presents maximum minimum range.  Congratulations! now able apply knowledge check performance improvements projects!","code":"shinytest2_out <- benchmark(   commit_list = commits,   shinytest2_dir = testthat_dir,   use_renv = FALSE,   tests_pattern = \"set1\",   n_rep = 5 ) summary(shinytest2_out) ##       commit                test_name n    mean median        sd    min    max ## 1    develop Out1 time elapsed - set1 5 12.3748 12.296 0.4735585 11.911 13.110 ## 2    develop Out2 time elapsed - set1 5  7.3794  7.128 0.6284081  6.915  8.450 ## 3    develop Out3 time elapsed - set1 5  5.7114  6.122 1.2180865  4.268  7.151 ## 4   feature1 Out1 time elapsed - set1 5  7.7218  7.321 1.0782086  7.010  9.612 ## 5   feature1 Out2 time elapsed - set1 5  5.3564  5.432 0.6035237  4.760  6.278 ## 6   feature1 Out3 time elapsed - set1 5  4.2884  4.399 0.7755584  3.128  5.269 ## 7 using_renv Out1 time elapsed - set1 5  5.3642  5.347 0.4555120  4.934  6.108 ## 8 using_renv Out2 time elapsed - set1 5  4.7490  4.793 0.7485402  3.701  5.505 ## 9 using_renv Out3 time elapsed - set1 5  4.5290  4.502 0.9829018  3.659  6.114 plot(shinytest2_out)"},{"path":"https://github.com/Appsilon/shiny.benchmark/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Douglas Azevedo. Author, maintainer. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Azevedo D (2024). shiny.benchmark: Benchmark Performance 'shiny' Applications. R package version 0.1.1, https://github.com/Appsilon/shiny.benchmark, https://github.com/Appsilon/shiny.benchmark.","code":"@Manual{,   title = {shiny.benchmark: Benchmark the Performance of 'shiny' Applications},   author = {Douglas Azevedo},   year = {2024},   note = {R package version 0.1.1, https://github.com/Appsilon/shiny.benchmark},   url = {https://github.com/Appsilon/shiny.benchmark}, }"},{"path":"https://github.com/Appsilon/shiny.benchmark/index.html","id":"shinybenchmark-","dir":"","previous_headings":"","what":"Benchmark the Performance of shiny Applications","title":"Benchmark the Performance of shiny Applications","text":"Tools measure performance improvements shiny apps. shiny.benchmark tool aimed measure compare performance different versions shiny application. Based list different application versions, accessible git repo refs (commit hash branch name), user can write instructions executed using Cypress shinytest2. instructions evaluated different versions shiny application therefore performance’s improvement/deterioration (time elapsed) recorded. package flexible enough allow different sets tests different refs well different package versions (via renv). Also, user can replicate tests accurate measures performance.","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install?","title":"Benchmark the Performance of shiny Applications","text":"Stable version: Development version:","code":"install.packages(\"shiny.benchmark\") remotes::install_github(\"Appsilon/shiny.benchmark\")"},{"path":"https://github.com/Appsilon/shiny.benchmark/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Benchmark the Performance of shiny Applications","text":"shiny.benchmark can use two different engines test change performance application: shinytest2 Cypress. latter requires Node (version 12 higher) yarn (version 1.22.17 higher) available. install computer, follow guidelines documentation pages: Node yarn Besides , Linux, might required install Cypress dependencies. Check documentation find .","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/index.html","id":"how-to-use-it","dir":"","previous_headings":"","what":"How to use it?","title":"Benchmark the Performance of shiny Applications","text":"best way start using shiny.benchmark example. want start point, can use load_example function. order use , create new folder computer use following code generate application serve us example performance checks: create useful files path//new/project. important one run_tests.R provides several instructions top. comparing versions application, need different app versions different branches/commits git. Start using cd app; git init initiate git inside app/ folder. Get familiar app/server.R file order generate interesting scenarios. basic idea use Sys.sleep function simulate app’s functionalities. Remember , running benchmark, amount time take measure performance. ready, commit changes master/main using git add .; git commit -m \"commit message\". Make editions commit new changes new branch branch testing (different commit hash). Repeat process adding many new modifications want. E.g. add renv, add tests, change names tests/test files . complete example setup git: Now ready go. benchmark function provides several arguments make life easier running performance checks. mandatory arguments : commit_list: vector commits, branches anything else can use git checkout cypress_dir shinytest2_dir: Folder containing tests want check performance. case tests/cypress tests respectively. default behavior try use renv project. renv structure, can turn renv using use_renv = FALSE need run Cypress tests. don’t use Cypress, may want use shinytest2 instead: run just specific tests, can take advantage tests_pattern argument. filter test file’s names based regular expression: project renv structure, can set use_renv TRUE guarantee , application version using correct packages. want approve/reprove renv::restore(), can set renv_prompt = TRUE. accurate information time application takes perform actions, may need replicate tests. case, can use n_rep argument: fast information tests results, can use summary also plot methods:","code":"library(shiny.benchmark)  load_example(path = \"path/to/new/project\") # starting git init echo .Rproj.user >> .gitignore echo *.Rproj >> .gitignore echo .Rprofile >> .gitignore echo renv >> .gitignore echo .Rprofile >> .gitignore  # master git add . git commit -m \"first commit\"  # develop (decrease Sys.sleep times in server.R) git checkout -b develop git add . git commit -m \"improving performance\"  ## Using renv git branch renv_shiny1 develop git checkout renv_shiny1 R -e 'renv::init()' git add . git commit -m \"renv active\"  ## Downgrading shiny git checkout -b renv_shiny2 R -e 'renv::install(\"shiny@1.7.0\")' R -e 'renv::snapshot()' git add . git commit -m \"downgrading shiny\"  ## Switching back to develop git checkout develop library(shiny.benchmark)  # commits to compare commit_list <- c(\"develop\", \"renv_shiny1\", \"renv_shiny2\")  # run performance check using Cypress benchmark(   commit_list = commit_list,   cypress_dir = \"tests/cypress\" ) benchmark(   commit_list = commit_list,   shinytest2_dir = \"tests\" ) benchmark(   commit_list = commit_list,   shinytest2_dir = \"tests\",   tests_pattern = \"use_this_one_[0-9]\" ) benchmark(   commit_list = commit_list,   shinytest2_dir = \"tests\",   tests_pattern = \"use_this_one_[0-9]\",   use_renv = TRUE, # default   renv_prompt = TRUE ) out <- benchmark(   commit_list = commit_list,   cypress_dir = \"tests/cypress\",   tests_pattern = \"use_this_one_[0-9]\",   use_renv = FALSE,   n_rep = 15 )  out summary(out) plot(out)"},{"path":"https://github.com/Appsilon/shiny.benchmark/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute?","title":"Benchmark the Performance of shiny Applications","text":"want contribute project please submit regular PR, ’re done new feature bug fix. Reporting bug also helpful - please use GitHub issues describe problem detailed possible.","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/index.html","id":"appsilon","dir":"","previous_headings":"","what":"Appsilon","title":"Benchmark the Performance of shiny Applications","text":"Appsilon Posit (formerly RStudio) Full Service Certified Partner. Learn appsilon.com. Get touch opensource@appsilon.com Explore Rhinoverse - family R packages built around Rhino!","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/add_sendtime2js.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the sendTime function to the .js file — add_sendtime2js","title":"Add the sendTime function to the .js file — add_sendtime2js","text":"Add sendTime function .js file","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/add_sendtime2js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the sendTime function to the .js file — add_sendtime2js","text":"","code":"add_sendtime2js(js_file, txt_file)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/add_sendtime2js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the sendTime function to the .js file — add_sendtime2js","text":"js_file Path .js file add code txt_file Path file record execution times","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute performance tests for a list of commits — benchmark","title":"Execute performance tests for a list of commits — benchmark","text":"Execute performance tests list commits","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute performance tests for a list of commits — benchmark","text":"","code":"benchmark(   commit_list,   cypress_dir = NULL,   shinytest2_dir = NULL,   tests_pattern = NULL,   app_dir = getwd(),   port = 3333,   use_renv = TRUE,   renv_prompt = TRUE,   n_rep = 1,   debug = FALSE )"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute performance tests for a list of commits — benchmark","text":"commit_list list commit hash codes, branches' names anything else can use git checkout ... cypress_dir directory tests recorded Cypress. can also vector size commit_list shinytest2_dir directory tests recorded shinytest2 can also vector size commit_list tests_pattern Cypress/shinytest2 files pattern. E.g. 'performance' can also vector size commit_list. NULL, content cypress_dir/shinytest2_dir used app_dir path application root port Port run app use_renv case set TRUE, package try apply renv::restore() branches. Otherwise, current loaded list packages used branches. renv_prompt Prompt user taking action? n_rep Number replications desired debug Logical. TRUE display system messages runtime","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute performance tests for a list of commits — benchmark","text":"Return shiny_benchmark object containing benchmark call, elapsed time list collected performance times","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark_cypress.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the performance test based on multiple commits using Cypress — benchmark_cypress","title":"Run the performance test based on multiple commits using Cypress — benchmark_cypress","text":"Run performance test based multiple commits using Cypress","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark_cypress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the performance test based on multiple commits using Cypress — benchmark_cypress","text":"","code":"benchmark_cypress(   commit_list,   cypress_dir,   tests_pattern,   app_dir,   port,   use_renv,   renv_prompt,   n_rep,   debug )"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark_cypress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the performance test based on multiple commits using Cypress — benchmark_cypress","text":"commit_list list commit hash codes, branches' names anything else can use git checkout ... cypress_dir directory tests recorded Cypress. can also vector size commit_list tests_pattern Cypress/shinytest2 files pattern. E.g. 'shinytest2' can also vector size commit_list. NULL, content cypress_dir/shinytest2_dir used app_dir path application root port Port run app use_renv case set TRUE, package try apply renv::restore() branches. Otherwise, current loaded list packages used branches. renv_prompt Prompt user taking action? n_rep Number replications desired debug Logical. TRUE display system messages runtime","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark_cypress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the performance test based on multiple commits using Cypress — benchmark_cypress","text":"Return list collected performance times","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark_shinytest2.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the performance test based on a multiple commits using shinytest2 — benchmark_shinytest2","title":"Run the performance test based on a multiple commits using shinytest2 — benchmark_shinytest2","text":"Run performance test based multiple commits using shinytest2","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark_shinytest2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the performance test based on a multiple commits using shinytest2 — benchmark_shinytest2","text":"","code":"benchmark_shinytest2(   commit_list,   shinytest2_dir,   tests_pattern,   app_dir,   use_renv,   renv_prompt,   n_rep,   debug )"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark_shinytest2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the performance test based on a multiple commits using shinytest2 — benchmark_shinytest2","text":"commit_list list commit hash codes, branches' names anything else can use git checkout ... shinytest2_dir directory tests recorded shinytest2 can also vector size commit_list tests_pattern shinytest2 files pattern. E.g. 'performance' can also vector size commit_list. NULL, content cypress_dir/shinytest2_dir used app_dir path application root use_renv case set TRUE, package try apply renv::restore() branches. Otherwise, current loaded list packages used branches. renv_prompt Prompt user taking action? n_rep Number replications desired debug Logical. TRUE display system messages runtime","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/benchmark_shinytest2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the performance test based on a multiple commits using shinytest2 — benchmark_shinytest2","text":"Return list collected performance times","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/check_uncommitted_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for uncommitted files — check_uncommitted_files","title":"Check for uncommitted files — check_uncommitted_files","text":"Check uncommitted files","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/check_uncommitted_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for uncommitted files — check_uncommitted_files","text":"","code":"check_uncommitted_files()"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/checkout.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkout GitHub branch — checkout","title":"Checkout GitHub branch — checkout","text":"checkout go different branch","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/checkout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkout GitHub branch — checkout","text":"","code":"checkout(branch, debug)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/checkout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkout GitHub branch — checkout","text":"branch Commit hash code branch name debug Logical. TRUE display system messages runtime","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/checkout_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkout GitHub files — checkout_files","title":"Checkout GitHub files — checkout_files","text":"Checkout anything created app. prevents errors changing branches","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/checkout_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkout GitHub files — checkout_files","text":"","code":"checkout_files(debug)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/checkout_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkout GitHub files — checkout_files","text":"debug Logical. TRUE display system messages runtime","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the cypress configuration list — create_cypress_list","title":"Create the cypress configuration list — create_cypress_list","text":"Create cypress configuration list","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the cypress configuration list — create_cypress_list","text":"","code":"create_cypress_list(plugins_file, port)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the cypress configuration list — create_cypress_list","text":"plugins_file path Cypress plugins port Port run app","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_plugins.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the JS code to track execution time — create_cypress_plugins","title":"Create the JS code to track execution time — create_cypress_plugins","text":"Create JS code track execution time","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_plugins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the JS code to track execution time — create_cypress_plugins","text":"","code":"create_cypress_plugins()"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a temporary directory to store everything needed by Cypress — create_cypress_structure","title":"Create a temporary directory to store everything needed by Cypress — create_cypress_structure","text":"Create temporary directory store everything needed Cypress","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a temporary directory to store everything needed by Cypress — create_cypress_structure","text":"","code":"create_cypress_structure(app_dir, port, debug)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a temporary directory to store everything needed by Cypress — create_cypress_structure","text":"app_dir path application root port Port run app debug Logical. TRUE display system messages runtime","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the cypress files under project directory — create_cypress_tests","title":"Create the cypress files under project directory — create_cypress_tests","text":"Create cypress files project directory","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the cypress files under project directory — create_cypress_tests","text":"","code":"create_cypress_tests(project_path, cypress_dir, tests_pattern)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_cypress_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the cypress files under project directory — create_cypress_tests","text":"project_path path project needed packages installed cypress_dir directory tests recorded Cypress tests_pattern Cypress files pattern. E.g. 'performance'. NULL, content used","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_node_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the list of needed libraries — create_node_list","title":"Create the list of needed libraries — create_node_list","text":"Create list needed libraries","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_node_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the list of needed libraries — create_node_list","text":"","code":"create_node_list(tests_path, port)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_node_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create the list of needed libraries — create_node_list","text":"tests_path path project port Port run app","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a progress bar to follow the execution — create_progress_bar","title":"Create a progress bar to follow the execution — create_progress_bar","text":"Create progress bar follow execution","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a progress bar to follow the execution — create_progress_bar","text":"","code":"create_progress_bar(total = 100)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_progress_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a progress bar to follow the execution — create_progress_bar","text":"total Total number replications","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_shinytest2_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a temporary directory to store everything needed by shinytest2 — create_shinytest2_structure","title":"Create a temporary directory to store everything needed by shinytest2 — create_shinytest2_structure","text":"Create temporary directory store everything needed shinytest2","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_shinytest2_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a temporary directory to store everything needed by shinytest2 — create_shinytest2_structure","text":"","code":"create_shinytest2_structure(app_dir)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/create_shinytest2_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a temporary directory to store everything needed by shinytest2 — create_shinytest2_structure","text":"app_dir path application root","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/get_commit_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the commit date in POSIXct format — get_commit_date","title":"Get the commit date in POSIXct format — get_commit_date","text":"Get commit date POSIXct format","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/get_commit_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the commit date in POSIXct format — get_commit_date","text":"","code":"get_commit_date(branch)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/get_commit_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the commit date in POSIXct format — get_commit_date","text":"branch Commit hash code branch name","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/get_commit_hash.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the hash code of the current commit — get_commit_hash","title":"Find the hash code of the current commit — get_commit_hash","text":"Find hash code current commit","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/get_commit_hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the hash code of the current commit — get_commit_hash","text":"","code":"get_commit_hash()"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/load_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Load an application and instructions to run shiny.benchmark — load_example","title":"Load an application and instructions to run shiny.benchmark — load_example","text":"function aims generate template used shiny.benchmark. create necessary structure path examples tests using Cypress shinytest2. Also, simple application added folder well instructions perform performance checks. aware new git repo need selected path.","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/load_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load an application and instructions to run shiny.benchmark — load_example","text":"","code":"load_example(path, force = FALSE)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/load_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load an application and instructions to run shiny.benchmark — load_example","text":"path character vector full path name force Create example even directory exist empty","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/load_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load an application and instructions to run shiny.benchmark — load_example","text":"Print console instructions run example","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/load_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load an application and instructions to run shiny.benchmark — load_example","text":"","code":"load_example(file.path(tempdir(), \"example_destination\"), force = TRUE) #> app created at /tmp/RtmpSdnjxE/example_destination #> run_tests.R created at /tmp/RtmpSdnjxE/example_destination #> Follow instructions in /tmp/RtmpSdnjxE/example_destination/run_tests.R"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/move_shinytest2_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Move tests to a temporary folder — move_shinytest2_tests","title":"Move tests to a temporary folder — move_shinytest2_tests","text":"Move tests temporary folder","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/move_shinytest2_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Move tests to a temporary folder — move_shinytest2_tests","text":"","code":"move_shinytest2_tests(project_path, shinytest2_dir)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/move_shinytest2_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Move tests to a temporary folder — move_shinytest2_tests","text":"project_path path project shinytest2_dir directory tests recorded shinytest2","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/performance_test_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Running the node script ","title":"Running the node script ","text":"Running node script \"performance_test\" system-dependent","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/performance_test_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running the node script ","text":"","code":"performance_test_cmd(project_path)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/performance_test_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running the node script ","text":"project_path path project directory (one level node)","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/plot.shiny_benchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for shiny_benchmark class — plot.shiny_benchmark","title":"Plot for shiny_benchmark class — plot.shiny_benchmark","text":"Plot shiny_benchmark class","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/plot.shiny_benchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for shiny_benchmark class — plot.shiny_benchmark","text":"","code":"# S3 method for shiny_benchmark plot(x, ...)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/plot.shiny_benchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for shiny_benchmark class — plot.shiny_benchmark","text":"x shiny_benchmark object ... parameters","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/plot.shiny_benchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot for shiny_benchmark class — plot.shiny_benchmark","text":"Return ggplot object compares different git refs","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/print.shiny_benchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Print for shiny_benchmark class — print.shiny_benchmark","title":"Print for shiny_benchmark class — print.shiny_benchmark","text":"Print shiny_benchmark class","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/print.shiny_benchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print for shiny_benchmark class — print.shiny_benchmark","text":"","code":"# S3 method for shiny_benchmark print(x, ...)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/print.shiny_benchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print for shiny_benchmark class — print.shiny_benchmark","text":"x shiny_benchmark object ... parameters","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/print.shiny_benchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print for shiny_benchmark class — print.shiny_benchmark","text":"Print console information shiny_benchmark object","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/restore_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and restore renv — restore_env","title":"Check and restore renv — restore_env","text":"Check whether renv use current branch. Raise error renv use apply renv:restore() case package present","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/restore_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and restore renv — restore_env","text":"","code":"restore_env(branch, renv_prompt)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/restore_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and restore renv — restore_env","text":"branch Commit hash code branch name. Useful create informative error message renv_prompt Prompt user taking action?","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/run_cypress_ptest.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the performance test based on a single commit using Cypress — run_cypress_ptest","title":"Run the performance test based on a single commit using Cypress — run_cypress_ptest","text":"Run performance test based single commit using Cypress","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/run_cypress_ptest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the performance test based on a single commit using Cypress — run_cypress_ptest","text":"","code":"run_cypress_ptest(   commit,   project_path,   cypress_dir,   tests_pattern,   use_renv,   renv_prompt,   n_rep,   debug )"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/run_cypress_ptest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the performance test based on a single commit using Cypress — run_cypress_ptest","text":"commit commit hash code branch's name project_path path project needed packages installed cypress_dir directory tests recorded Cypress tests_pattern Cypress files pattern. E.g. 'performance'. NULL, content used use_renv case set TRUE, package try apply renv::restore() branches. Otherwise, current loaded list packages used branches. renv_prompt Prompt user taking action? n_rep Number replications desired debug Logical. TRUE display system messages runtime","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/run_cypress_ptest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the performance test based on a single commit using Cypress — run_cypress_ptest","text":"Return data.frame collected performance time","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/run_shinytest2_ptest.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the performance test based on a single commit using shinytest2 — run_shinytest2_ptest","title":"Run the performance test based on a single commit using shinytest2 — run_shinytest2_ptest","text":"Run performance test based single commit using shinytest2","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/run_shinytest2_ptest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the performance test based on a single commit using shinytest2 — run_shinytest2_ptest","text":"","code":"run_shinytest2_ptest(   commit,   project_path,   app_dir,   shinytest2_dir,   tests_pattern,   use_renv,   renv_prompt,   n_rep,   debug )"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/run_shinytest2_ptest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the performance test based on a single commit using shinytest2 — run_shinytest2_ptest","text":"commit commit hash code branch's name project_path path project app_dir path application root shinytest2_dir directory tests recorded shinytest2 tests_pattern shinytest2 files pattern. E.g. 'performance'. NULL, content used use_renv case set TRUE, package try apply renv::restore() branches. Otherwise, current loaded list packages used branches. renv_prompt Prompt user taking action? n_rep Number replications desired debug Logical. TRUE display system messages runtime","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/run_shinytest2_ptest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the performance test based on a single commit using shinytest2 — run_shinytest2_ptest","text":"Return data.frame collected performance time","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/shiny_benchmark-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An object of 'shiny_benchmark' class — shiny_benchmark-class","title":"An object of 'shiny_benchmark' class — shiny_benchmark-class","text":"object 'shiny_benchmark' class","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/shiny_benchmark-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An object of 'shiny_benchmark' class — shiny_benchmark-class","text":"call Function call time Time elapsed performance List measurements (one entry commit)","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/summarise_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Return statistics based on the set of tests replications — summarise_commit","title":"Return statistics based on the set of tests replications — summarise_commit","text":"Return statistics based set tests replications","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/summarise_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return statistics based on the set of tests replications — summarise_commit","text":"","code":"summarise_commit(object)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/summarise_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return statistics based on the set of tests replications — summarise_commit","text":"object shiny_benchmark object","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/summary.shiny_benchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for shiny_benchmark class — summary.shiny_benchmark","title":"Summary for shiny_benchmark class — summary.shiny_benchmark","text":"Summary shiny_benchmark class","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/summary.shiny_benchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for shiny_benchmark class — summary.shiny_benchmark","text":"","code":"# S3 method for shiny_benchmark summary(object, ...)"},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/summary.shiny_benchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for shiny_benchmark class — summary.shiny_benchmark","text":"object shiny_benchmark object ... parameters","code":""},{"path":"https://github.com/Appsilon/shiny.benchmark/reference/summary.shiny_benchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for shiny_benchmark class — summary.shiny_benchmark","text":"Return data.frame performance tests' summary statistics","code":""}]
